{
  "dataType": "CVE_RECORD",
  "containers": {
    "adp": [
      {
        "title": "CISA ADP Vulnrichment",
        "metrics": [
          {
            "other": {
              "type": "ssvc",
              "content": {
                "id": "CVE-2021-47585",
                "role": "CISA Coordinator",
                "options": [
                  {
                    "Exploitation": "none"
                  },
                  {
                    "Automatable": "no"
                  },
                  {
                    "Technical Impact": "partial"
                  }
                ],
                "version": "2.0.3",
                "timestamp": "2024-06-24T18:08:01.516987Z"
              }
            }
          }
        ],
        "providerMetadata": {
          "orgId": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
          "shortName": "CISA-ADP",
          "dateUpdated": "2024-06-24T18:08:06.072Z"
        }
      }
    ],
    "cna": {
      "title": "btrfs: fix memory leak in __add_inode_ref()",
      "affected": [
        {
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "vendor": "Linux",
          "product": "Linux",
          "versions": [
            {
              "status": "affected",
              "version": "d3316c8233bb",
              "lessThan": "005d9292b5b2",
              "versionType": "git"
            },
            {
              "status": "affected",
              "version": "d3316c8233bb",
              "lessThan": "493ff661d434",
              "versionType": "git"
            },
            {
              "status": "affected",
              "version": "d3316c8233bb",
              "lessThan": "f35838a69302",
              "versionType": "git"
            }
          ],
          "programFiles": [
            "fs/btrfs/tree-log.c"
          ],
          "defaultStatus": "unaffected"
        },
        {
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "vendor": "Linux",
          "product": "Linux",
          "versions": [
            {
              "status": "affected",
              "version": "5.5"
            },
            {
              "status": "unaffected",
              "version": "0",
              "lessThan": "5.5",
              "versionType": "custom"
            },
            {
              "status": "unaffected",
              "version": "5.10.88",
              "versionType": "custom",
              "lessThanOrEqual": "5.10.*"
            },
            {
              "status": "unaffected",
              "version": "5.15.11",
              "versionType": "custom",
              "lessThanOrEqual": "5.15.*"
            },
            {
              "status": "unaffected",
              "version": "5.16",
              "versionType": "original_commit_for_fix",
              "lessThanOrEqual": "*"
            }
          ],
          "programFiles": [
            "fs/btrfs/tree-log.c"
          ],
          "defaultStatus": "affected"
        }
      ],
      "references": [
        {
          "url": "https://git.kernel.org/stable/c/005d9292b5b2e71a009f911bd85d755009b37242"
        },
        {
          "url": "https://git.kernel.org/stable/c/493ff661d434d6bdf02e3a21adae04d7a0b4265d"
        },
        {
          "url": "https://git.kernel.org/stable/c/f35838a6930296fc1988764cfa54cb3f705c0665"
        }
      ],
      "x_generator": {
        "engine": "bippy-a5840b7849dd"
      },
      "descriptions": [
        {
          "lang": "en",
          "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: fix memory leak in __add_inode_ref()\n\nLine 1169 (#3) allocates a memory chunk for victim_name by kmalloc(),\nbut  when the function returns in line 1184 (#4) victim_name allocated\nby line 1169 (#3) is not freed, which will lead to a memory leak.\nThere is a similar snippet of code in this function as allocating a memory\nchunk for victim_name in line 1104 (#1) as well as releasing the memory\nin line 1116 (#2).\n\nWe should kfree() victim_name when the return value of backref_in_log()\nis less than zero and before the function returns in line 1184 (#4).\n\n1057 static inline int __add_inode_ref(struct btrfs_trans_handle *trans,\n1058 \t\t\t\t  struct btrfs_root *root,\n1059 \t\t\t\t  struct btrfs_path *path,\n1060 \t\t\t\t  struct btrfs_root *log_root,\n1061 \t\t\t\t  struct btrfs_inode *dir,\n1062 \t\t\t\t  struct btrfs_inode *inode,\n1063 \t\t\t\t  u64 inode_objectid, u64 parent_objectid,\n1064 \t\t\t\t  u64 ref_index, char *name, int namelen,\n1065 \t\t\t\t  int *search_done)\n1066 {\n\n1104 \tvictim_name = kmalloc(victim_name_len, GFP_NOFS);\n\t// #1: kmalloc (victim_name-1)\n1105 \tif (!victim_name)\n1106 \t\treturn -ENOMEM;\n\n1112\tret = backref_in_log(log_root, &search_key,\n1113\t\t\tparent_objectid, victim_name,\n1114\t\t\tvictim_name_len);\n1115\tif (ret < 0) {\n1116\t\tkfree(victim_name); // #2: kfree (victim_name-1)\n1117\t\treturn ret;\n1118\t} else if (!ret) {\n\n1169 \tvictim_name = kmalloc(victim_name_len, GFP_NOFS);\n\t// #3: kmalloc (victim_name-2)\n1170 \tif (!victim_name)\n1171 \t\treturn -ENOMEM;\n\n1180 \tret = backref_in_log(log_root, &search_key,\n1181 \t\t\tparent_objectid, victim_name,\n1182 \t\t\tvictim_name_len);\n1183 \tif (ret < 0) {\n1184 \t\treturn ret; // #4: missing kfree (victim_name-2)\n1185 \t} else if (!ret) {\n\n1241 \treturn 0;\n1242 }"
        }
      ],
      "providerMetadata": {
        "orgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "shortName": "Linux",
        "dateUpdated": "2024-06-19T14:53:50.780Z"
      }
    }
  },
  "cveMetadata": {
    "cveId": "CVE-2021-47585",
    "state": "PUBLISHED",
    "dateUpdated": "2024-06-24T18:08:15.557Z",
    "dateReserved": "2024-05-24T15:11:00.731Z",
    "assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
    "datePublished": "2024-06-19T14:53:50.780Z",
    "assignerShortName": "Linux"
  },
  "dataVersion": "5.1"
}