{
  "dataType": "CVE_RECORD",
  "containers": {
    "cna": {
      "title": "sched/fair: Fix shift-out-of-bounds in load_balance()",
      "affected": [
        {
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "vendor": "Linux",
          "product": "Linux",
          "versions": [
            {
              "status": "affected",
              "version": "5a7f55590467",
              "lessThan": "80862cbf76c2",
              "versionType": "git"
            },
            {
              "status": "affected",
              "version": "5a7f55590467",
              "lessThan": "2f3eab368e31",
              "versionType": "git"
            },
            {
              "status": "affected",
              "version": "5a7f55590467",
              "lessThan": "805cea93e66c",
              "versionType": "git"
            },
            {
              "status": "affected",
              "version": "5a7f55590467",
              "lessThan": "39a2a6eb5c9b",
              "versionType": "git"
            }
          ],
          "programFiles": [
            "kernel/sched/fair.c",
            "kernel/sched/sched.h"
          ],
          "defaultStatus": "unaffected"
        },
        {
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "vendor": "Linux",
          "product": "Linux",
          "versions": [
            {
              "status": "affected",
              "version": "5.10"
            },
            {
              "status": "unaffected",
              "version": "0",
              "lessThan": "5.10",
              "versionType": "custom"
            },
            {
              "status": "unaffected",
              "version": "5.10.37",
              "versionType": "custom",
              "lessThanOrEqual": "5.10.*"
            },
            {
              "status": "unaffected",
              "version": "5.11.21",
              "versionType": "custom",
              "lessThanOrEqual": "5.11.*"
            },
            {
              "status": "unaffected",
              "version": "5.12.4",
              "versionType": "custom",
              "lessThanOrEqual": "5.12.*"
            },
            {
              "status": "unaffected",
              "version": "5.13",
              "versionType": "original_commit_for_fix",
              "lessThanOrEqual": "*"
            }
          ],
          "programFiles": [
            "kernel/sched/fair.c",
            "kernel/sched/sched.h"
          ],
          "defaultStatus": "affected"
        }
      ],
      "references": [
        {
          "url": "https://git.kernel.org/stable/c/80862cbf76c2646f709a57c4517aefe0b094c774"
        },
        {
          "url": "https://git.kernel.org/stable/c/2f3eab368e313dba35fc2f51ede778bf7b030b54"
        },
        {
          "url": "https://git.kernel.org/stable/c/805cea93e66ca7deaaf6ad3b67224ce47c104c2f"
        },
        {
          "url": "https://git.kernel.org/stable/c/39a2a6eb5c9b66ea7c8055026303b3aa681b49a5"
        }
      ],
      "x_generator": {
        "engine": "bippy-a5840b7849dd"
      },
      "descriptions": [
        {
          "lang": "en",
          "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nsched/fair: Fix shift-out-of-bounds in load_balance()\n\nSyzbot reported a handful of occurrences where an sd->nr_balance_failed can\ngrow to much higher values than one would expect.\n\nA successful load_balance() resets it to 0; a failed one increments\nit. Once it gets to sd->cache_nice_tries + 3, this *should* trigger an\nactive balance, which will either set it to sd->cache_nice_tries+1 or reset\nit to 0. However, in case the to-be-active-balanced task is not allowed to\nrun on env->dst_cpu, then the increment is done without any further\nmodification.\n\nThis could then be repeated ad nauseam, and would explain the absurdly high\nvalues reported by syzbot (86, 149). VincentG noted there is value in\nletting sd->cache_nice_tries grow, so the shift itself should be\nfixed. That means preventing:\n\n  \"\"\"\n  If the value of the right operand is negative or is greater than or equal\n  to the width of the promoted left operand, the behavior is undefined.\n  \"\"\"\n\nThus we need to cap the shift exponent to\n  BITS_PER_TYPE(typeof(lefthand)) - 1.\n\nI had a look around for other similar cases via coccinelle:\n\n  @expr@\n  position pos;\n  expression E1;\n  expression E2;\n  @@\n  (\n  E1 >> E2@pos\n  |\n  E1 >> E2@pos\n  )\n\n  @cst depends on expr@\n  position pos;\n  expression expr.E1;\n  constant cst;\n  @@\n  (\n  E1 >> cst@pos\n  |\n  E1 << cst@pos\n  )\n\n  @script:python depends on !cst@\n  pos << expr.pos;\n  exp << expr.E2;\n  @@\n  # Dirty hack to ignore constexpr\n  if exp.upper() != exp:\n     coccilib.report.print_report(pos[0], \"Possible UB shift here\")\n\nThe only other match in kernel/sched is rq_clock_thermal() which employs\nsched_thermal_decay_shift, and that exponent is already capped to 10, so\nthat one is fine."
        }
      ],
      "providerMetadata": {
        "orgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "shortName": "Linux",
        "dateUpdated": "2024-05-29T05:01:08.102Z"
      }
    },
    "adp": [
      {
        "metrics": [
          {
            "other": {
              "type": "ssvc",
              "content": {
                "id": "CVE-2021-47044",
                "role": "CISA Coordinator",
                "options": [
                  {
                    "Exploitation": "none"
                  },
                  {
                    "Automatable": "no"
                  },
                  {
                    "Technical Impact": "partial"
                  }
                ],
                "version": "2.0.3",
                "timestamp": "2024-02-28T18:44:53.488673Z"
              }
            }
          }
        ],
        "providerMetadata": {
          "shortName": "CISA-ADP",
          "orgId": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
          "dateUpdated": "2024-05-23T19:01:13.611Z"
        }
      }
    ]
  },
  "cveMetadata": {
    "cveId": "CVE-2021-47044",
    "state": "PUBLISHED",
    "dateUpdated": "2024-05-29T05:01:08.102Z",
    "dateReserved": "2024-02-27T18:42:55.969Z",
    "assignerOrgId": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
    "datePublished": "2024-02-28T08:13:49.087Z",
    "assignerShortName": "Linux"
  },
  "dataVersion": "5.1"
}