{
  "dataType": "CVE_RECORD",
  "containers": {
    "adp": [
      {
        "title": "CISA ADP Vulnrichment",
        "metrics": [
          {
            "other": {
              "type": "ssvc",
              "content": {
                "id": "CVE-2024-28864",
                "role": "CISA Coordinator",
                "options": [
                  {
                    "Exploitation": "none"
                  },
                  {
                    "Automatable": "no"
                  },
                  {
                    "Technical Impact": "partial"
                  }
                ],
                "version": "2.0.3",
                "timestamp": "2024-07-16T00:14:33.422779Z"
              }
            }
          }
        ],
        "providerMetadata": {
          "orgId": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
          "shortName": "CISA-ADP",
          "dateUpdated": "2024-07-16T00:14:36.271Z"
        }
      }
    ],
    "cna": {
      "title": "[TagAwareCipher] - Decryption Failure (Regex Match)",
      "source": {
        "advisory": "GHSA-rj29-j2g4-77q8",
        "discovery": "UNKNOWN"
      },
      "metrics": [
        {
          "cvssV3_1": {
            "scope": "UNCHANGED",
            "version": "3.1",
            "baseScore": 2.6,
            "attackVector": "NETWORK",
            "baseSeverity": "LOW",
            "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N",
            "integrityImpact": "NONE",
            "userInteraction": "REQUIRED",
            "attackComplexity": "HIGH",
            "availabilityImpact": "NONE",
            "privilegesRequired": "LOW",
            "confidentialityImpact": "LOW"
          }
        }
      ],
      "affected": [
        {
          "vendor": "IlicMiljan",
          "product": "Secure-Props",
          "versions": [
            {
              "status": "affected",
              "version": ">= 1.2.0, < 1.2.2"
            }
          ]
        }
      ],
      "references": [
        {
          "url": "https://github.com/IlicMiljan/Secure-Props/security/advisories/GHSA-rj29-j2g4-77q8",
          "name": "https://github.com/IlicMiljan/Secure-Props/security/advisories/GHSA-rj29-j2g4-77q8",
          "tags": [
            "x_refsource_CONFIRM"
          ]
        },
        {
          "url": "https://github.com/IlicMiljan/Secure-Props/issues/20",
          "name": "https://github.com/IlicMiljan/Secure-Props/issues/20",
          "tags": [
            "x_refsource_MISC"
          ]
        },
        {
          "url": "https://github.com/IlicMiljan/Secure-Props/pull/21",
          "name": "https://github.com/IlicMiljan/Secure-Props/pull/21",
          "tags": [
            "x_refsource_MISC"
          ]
        },
        {
          "url": "https://github.com/IlicMiljan/Secure-Props/commit/ab7b561040cd37fda3dbf9a6cab01fefcaa16627",
          "name": "https://github.com/IlicMiljan/Secure-Props/commit/ab7b561040cd37fda3dbf9a6cab01fefcaa16627",
          "tags": [
            "x_refsource_MISC"
          ]
        }
      ],
      "descriptions": [
        {
          "lang": "en",
          "value": "SecureProps is a PHP library designed to simplify the encryption and decryption of property data in objects. A vulnerability in SecureProps version 1.2.0 and 1.2.1 involves a regex failing to detect tags during decryption of encrypted data. This occurs when the encrypted data has been encoded with `NullEncoder` and passed to `TagAwareCipher`, and contains special characters such as `\\n`. As a result, the decryption process is skipped since the tags are not detected. This causes the encrypted data to be returned in plain format.  The vulnerability affects users who implement `TagAwareCipher` with any base cipher that has `NullEncoder` (not default). The patch for the issue has been released. Users are advised to update to version 1.2.2. As a workaround, one may use the default `Base64Encoder` with the base cipher decorated with `TagAwareCipher` to prevent special characters in the encrypted string from interfering with regex tag detection logic.  This workaround is safe but may involve double encoding since `TagAwareCipher` uses `NullEncoder` by default."
        }
      ],
      "problemTypes": [
        {
          "descriptions": [
            {
              "lang": "en",
              "type": "CWE",
              "cweId": "CWE-1333",
              "description": "CWE-1333: Inefficient Regular Expression Complexity"
            }
          ]
        }
      ],
      "providerMetadata": {
        "orgId": "a0819718-46f1-4df5-94e2-005712e83aaa",
        "shortName": "GitHub_M",
        "dateUpdated": "2024-03-18T21:50:26.926Z"
      }
    }
  },
  "cveMetadata": {
    "cveId": "CVE-2024-28864",
    "state": "PUBLISHED",
    "dateUpdated": "2024-07-16T00:14:39.027Z",
    "dateReserved": "2024-03-11T22:45:07.687Z",
    "assignerOrgId": "a0819718-46f1-4df5-94e2-005712e83aaa",
    "datePublished": "2024-03-18T21:49:06.762Z",
    "assignerShortName": "GitHub_M"
  },
  "dataVersion": "5.1"
}